package veinthrough.leetcode.stack.monstack;

/**
 * [#MonoStack]: 单调栈
 * 1. 应用:
 * (1) 最基础的应用就是给定一组数，针对每个数，寻找它和它右边第一个比它大的数之间有多少个数。
 * > 变种1: 给定一组数，针对每个数，寻找它和它右边第一个比它大的数之间有多少个数
 *   {@link NearestLargerOnRight}
 * > 变种2: 有一群牛站成一排，每头牛都是面朝右的，每头牛可以看到他右边身高比他小的牛。给出每头牛的身高，要求每头牛能看到的牛的总数。
 * (2)给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列的长度最大。
 * > 求N个矩形组成的图形包含的最大的矩形面积
 * {@link MaxRectangularArea}
 * > 求仅由0，1组成的矩阵中，全部由1组成的子矩阵的最大面积：见文档《单调栈》
 * (3) 给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列所有元素和最大。
 * (4) 直方图能接的水量(Drop, 面试题 17.21):
 * {@link Drop#_maxDropStack(int[])}
 *
 * 2. 伪代码
 * 本伪代码对应的是单调递减栈共n个元素，编号为0~n-1
 * #        for (i = 0; i <= n; i++) {// 【循环1】
 * #            if (栈为空或入栈元素大于等于栈顶元素) 入栈【入栈1】;
 * #            else {
 * #                while (栈非空并且栈顶元素大于等于入栈元素) {// 【循环2】
 * #                    栈顶元素出栈;
 * #                    更新结果;
 * #                }
 * #            }
 * #            将最后一次出栈的栈顶元素【即当前元素可以拓展到的位置】入栈【入栈2】;
 * #            更新最后一次出栈的栈顶元素其对应的值;
 * #        }
 * # // 这里【入栈1】【入栈2】可以合并, 将【循环2】提到前面
 */
@SuppressWarnings("unused")
public class MonoStack {
}